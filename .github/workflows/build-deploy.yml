name: Build and Deploy code

on: [ push, pull_request ]

jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{ vars.DATABASE_HOSTNAME }}
      DATABASE_PORT: ${{ vars.DATABASE_PORT }}
      DATABASE_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ vars.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ vars.DATABASE_USERNAME }}
      SECRET_KEY: ${{ vars.SECRET_KEY }}
      ALGORITHM: ${{ vars.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{vars.DATABASE_PASSWORD}}
          #          POSTGRES_MULTIPLE_DATABASES: ${{ vars.DATABASE_NAME }}_test,${{ vars.DATABASE_NAME }}
          POSTGRES_DB: ${{ vars.DATABASE_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres_testing:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{vars.DATABASE_PASSWORD}}
          #          POSTGRES_MULTIPLE_DATABASES: ${{ vars.DATABASE_NAME }}_test,${{ vars.DATABASE_NAME }}
          POSTGRES_DB: ${{ vars.DATABASE_NAME }}_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: setting up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: installing dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: |
          pip install pytest
          pytest

#      -
#        name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      -
#        name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      -
#        name: Build and push
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ./Dockerfile
#          push: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi:latest
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    environment:
      name: Production
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Deploying stuff
        run: echo "Deploying stuff"
#      - name: pulling repo
#        uses: actions/checkout@v2
#      - name: deploying to heroku
#        uses: akhileshns/heroku-deploy@v3.13.15 # This is the action
#        with:
#          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
#          heroku_email: ${{secrets.HEROKU_EMAIL}}
#      # pull from git repository

      # install heroku cli
      # heroku login
      # add git remote for heroku
      # git push heroku main

      # login to our ubuntu
      # cd /app/src
      # git pull
      # systemctl restart api
#      - name: deploy to ubuntu server
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.PROD_HOST }}
#          username: ${{ secrets.PROD_USERNAME }}
#          password: ${{ secrets.PROD_PASSWORD }}
#          port: ${{ secrets.PROD_PORT }}
#          script: |
#            cd app/src
#            git pull
#            echo ${{ secrets.PROD_PASSWORD }} | sudo -S systemctl restart api